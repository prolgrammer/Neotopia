import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'dart:math';
import '../../cubits/game_cubit.dart';

class QuizScreen extends StatefulWidget {
  @override
  _QuizScreenState createState() => _QuizScreenState();
}

class _QuizScreenState extends State<QuizScreen> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;
  List<Map<String, dynamic>> selectedQuestions = [];
  int currentQuestionIndex = 0;
  int correctAnswers = 0;
  bool showResult = false;
  static const int coinsPerCorrectAnswer = 10;

  final questions = [
    {
      'category': '–ò—Å—Ç–æ—Ä–∏—è Neoflex',
      'question': '–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è Neoflex?',
      'options': '2000,2005,2010,2015',
      'correct_answer': '2005',
    },
    {
      'category': '–ò—Å—Ç–æ—Ä–∏—è Neoflex',
      'question': '–ö–∞–∫–æ–π –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –±—ã–ª –ø–µ—Ä–≤—ã–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ Neoflex?',
      'options': 'GoldenSource 360 EDM,Neoflex Integra,Big Data –¥–ª—è –∞–≥—Ä–æ—Ö–æ–ª–¥–∏–Ω–≥–∞,CRM –¥–ª—è –±–∞–Ω–∫–∞',
      'correct_answer': 'GoldenSource 360 EDM',
    },
    {
      'category': '–ò—Å—Ç–æ—Ä–∏—è Neoflex',
      'question': '–°–∫–æ–ª—å–∫–æ –±–∞–Ω–∫–æ–≤ –∏–∑ —Ç–æ–ø-100 –†–æ—Å—Å–∏–∏ –±—ã–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ Neoflex –≤ 2014 –≥–æ–¥—É?',
      'options': '20,30,40,50',
      'correct_answer': '40',
    },
    {
      'category': '–ò—Å—Ç–æ—Ä–∏—è Neoflex',
      'question': '–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç Neoflex –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É IBM 8 —Ä–∞–∑ –∑–∞ 10 –ª–µ—Ç?',
      'options': 'Neoflex FrontOffice,Neoflex Integra,Neoflex Reporting,Neoflex Datagram',
      'correct_answer': 'Neoflex Reporting',
    },
    {
      'category': '–ò—Å—Ç–æ—Ä–∏—è Neoflex',
      'question': '–í –∫–∞–∫–æ–º –≥–æ–¥—É Neoflex –æ—Ç–∫—Ä—ã–ª —Ü–µ–Ω—Ç—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ –ü–µ–Ω–∑–µ?',
      'options': '2018,2019,2020,2021',
      'correct_answer': '2020',
    },
    {
      'category': 'IT-–≤—ã–∑–æ–≤—ã',
      'question': '–ö–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Neoflex –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º?',
      'options': 'SOA,Monolith,Microkernel,Event-Driven',
      'correct_answer': 'SOA',
    },
    {
      'category': 'IT-–≤—ã–∑–æ–≤—ã',
      'question': '–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Neoflex Datagram?',
      'options': '–¢–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ,–¢–æ–ª—å–∫–æ –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ,–ü–æ–ª—É—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ,–í—Å–µ —Ç–∏–ø—ã',
      'correct_answer': '–í—Å–µ —Ç–∏–ø—ã',
    },
    {
      'category': 'IT-–≤—ã–∑–æ–≤—ã',
      'question': '–ö–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Neoflex –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è Big Data?',
      'options': 'Hadoop,Spark,–û–±–∞,–ù–∏ –æ–¥–∏–Ω',
      'correct_answer': '–û–±–∞',
    },
    {
      'category': 'IT-–≤—ã–∑–æ–≤—ã',
      'question': '–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ Neoflex –ø—Ä–∏–º–µ–Ω—è–µ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –¶–ë –†–§?',
      'options': 'Excel,Neoflex Reporting,SQL scripts,Tableau',
      'correct_answer': 'Neoflex Reporting',
    },
    {
      'category': 'IT-–≤—ã–∑–æ–≤—ã',
      'question': '–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Neoflex Datagram –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞?',
      'options': 'Java,Scala,Python,C#',
      'correct_answer': 'Scala',
    },
    {
      'category': '–¶–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä—ã',
      'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–µ—Ä—Å–∏–∏ Neoflex?',
      'options': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤,–°–æ–∑–¥–∞–Ω–∏–µ IT-–ø–ª–∞—Ç—Ñ–æ—Ä–º,–í–Ω–µ–¥—Ä–µ–Ω–∏–µ CRM,–û–±—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
      'correct_answer': '–°–æ–∑–¥–∞–Ω–∏–µ IT-–ø–ª–∞—Ç—Ñ–æ—Ä–º',
    },
    {
      'category': '–¶–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä—ã',
      'question': '–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç Neoflex –ø–æ–º–æ–≥–∞–µ—Ç –±–∞–Ω–∫–∞–º —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏?',
      'options': 'Neoflex Reporting,Neoflex FrontOffice,Neoflex Integra,Neoflex Datagram',
      'correct_answer': 'Neoflex FrontOffice',
    },
    {
      'category': '–¶–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä—ã',
      'question': '–ö–∞–∫—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é Neoflex –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö?',
      'options': 'FastData,Blockchain,AI,Quantum Computing',
      'correct_answer': 'FastData',
    },
    {
      'category': '–¶–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä—ã',
      'question': '–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç Neoflex –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¶–ë –†–§?',
      'options': 'Neoflex Reporting,Neoflex Integra,Neoflex Datagram,Neoflex FrontOffice',
      'correct_answer': 'Neoflex Reporting',
    },
    {
      'category': '–¶–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä—ã',
      'question': '–ö–∞–∫–æ–π —Ç–∏–ø –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç Neoflex –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤?',
      'options': 'Monolith,SOA,Microservices,Serverless',
      'correct_answer': 'Microservices',
    },
    {
      'category': '–ö–ª–∏–µ–Ω—Ç—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã',
      'question': '–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ—à–µ–Ω–∏—è Neoflex?',
      'options': '5,10,18,25',
      'correct_answer': '18',
    },
    {
      'category': '–ö–ª–∏–µ–Ω—Ç—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã',
      'question': '–ö–∞–∫–æ–π –±–∞–Ω–∫ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º Neoflex?',
      'options': '–°–±–µ—Ä–±–∞–Ω–∫,–í–¢–ë,UniCredit Bank,–¢–∏–Ω—å–∫–æ—Ñ—Ñ',
      'correct_answer': 'UniCredit Bank',
    },
    {
      'category': '–ö–ª–∏–µ–Ω—Ç—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã',
      'question': '–î–ª—è –∫–∞–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ Neoflex —Å–æ–∑–¥–∞–ª —Ü–µ–Ω—Ç—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è?',
      'options': '–ë–∞–Ω–∫–∏,–õ–æ–≥–∏—Å—Ç–∏–∫–∞,–†–∏—Ç–µ–π–ª,–ê–≥—Ä–æ–ø—Ä–æ–º',
      'correct_answer': '–õ–æ–≥–∏—Å—Ç–∏–∫–∞',
    },
    {
      'category': '–ö–ª–∏–µ–Ω—Ç—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã',
      'question': '–ö–∞–∫–æ–π –∞–≥—Ä–æ—Ö–æ–ª–¥–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Big Data –æ—Ç Neoflex?',
      'options': '–ú–∏—Ä–∞—Ç–æ—Ä–≥,–†—É—Å–∞–≥—Ä–æ,–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ,–ß–µ—Ä–∫–∏–∑–æ–≤–æ',
      'correct_answer': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    },
    {
      'category': '–ö–ª–∏–µ–Ω—Ç—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã',
      'question': '–ö–∞–∫–æ–π –±–∞–Ω–∫ –ø–æ–ª—É—á–∏–ª CRM-—Ä–µ—à–µ–Ω–∏–µ –æ—Ç Neoflex?',
      'options': '–¢—Ä–∞–Ω—Å–ö–∞–ø–∏—Ç–∞–ª–ë–∞–Ω–∫,–í–¢–ë,–°–±–µ—Ä–±–∞–Ω–∫,–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
      'correct_answer': '–¢—Ä–∞–Ω—Å–ö–∞–ø–∏—Ç–∞–ª–ë–∞–Ω–∫',
    },
    {
      'category': '–¶–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫—É–ª—å—Ç—É—Ä–∞',
      'question': '–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é Neoflex?',
      'options': '–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏,–ö–ª–∏–µ–Ω—Ç—ã,–ü—Ä–∏–±—ã–ª—å,–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
      'correct_answer': '–ö–ª–∏–µ–Ω—Ç—ã',
    },
    {
      'category': '–¶–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫—É–ª—å—Ç—É—Ä–∞',
      'question': '–ö–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ Neoflex –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ?',
      'options': 'Agile,Waterfall,Lean,Kanban',
      'correct_answer': 'Agile',
    },
    {
      'category': '–¶–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫—É–ª—å—Ç—É—Ä–∞',
      'question': '–ö–∞–∫ Neoflex –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?',
      'options': '–¢–æ–ª—å–∫–æ –∑–∞—Ä–ø–ª–∞—Ç–∞,–û–±—É—á–µ–Ω–∏–µ,–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞,–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ',
      'correct_answer': '–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ',
    },
    {
      'category': '–¶–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫—É–ª—å—Ç—É—Ä–∞',
      'question': '–ö–∞–∫–æ–π –ø—Ä–∏–Ω—Ü–∏–ø –ª–µ–∂–∏—Ç –≤ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ Neoflex?',
      'options': '–°–∫–æ—Ä–æ—Å—Ç—å,–ö–∞—á–µ—Å—Ç–≤–æ,–≠–∫–æ–Ω–æ–º–∏—è,–†–∏—Å–∫–∏',
      'correct_answer': '–ö–∞—á–µ—Å—Ç–≤–æ',
    },
    {
      'category': '–¶–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫—É–ª—å—Ç—É—Ä–∞',
      'question': '–ö–∞–∫—É—é –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç Neoflex?',
      'options': 'Scrum,Waterfall,PRINCE2,CMMI',
      'correct_answer': 'Scrum',
    },
  ];

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: Duration(milliseconds: 500),
      vsync: this,
    );
    _animation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    );
    _selectRandomQuestions();
    _controller.forward();
  }

  void _selectRandomQuestions() {
    final categories = questions.map((q) => q['category'] as String).toSet();
    final random = Random();
    for (var category in categories) {
      final categoryQuestions = questions.where((q) => q['category'] == category).toList();
      if (categoryQuestions.isNotEmpty) {
        selectedQuestions.add(categoryQuestions[random.nextInt(categoryQuestions.length)]);
      }
    }
  }

  void _answerQuestion(String selectedOption) async {
    if (selectedQuestions[currentQuestionIndex]['correct_answer'] == selectedOption) {
      correctAnswers++;
      await context.read<GameCubit>().addCoins(coinsPerCorrectAnswer);
    }

    setState(() {
      _controller.reset();
      if (currentQuestionIndex < selectedQuestions.length - 1) {
        currentQuestionIndex++;
        _controller.forward();
      } else {
        showResult = true;
      }
    });
  }

  String _getResultMessage() {
    final totalQuestions = selectedQuestions.length;
    final percentage = correctAnswers / totalQuestions;

    if (percentage == 1.0) {
      return '–¢—ã –º–∞—Å—Ç–µ—Ä Neoflex! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ! üéâ';
    } else if (percentage >= 0.8) {
      return '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—à—å Neoflex! üí™';
    } else if (percentage >= 0.6) {
      return '–ù–µ–ø–ª–æ—Ö–æ! –¢—ã –∑–Ω–∞–∫–æ–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏! üòé';
    } else if (percentage >= 0.4) {
      return '–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞! –ó–∞–≥–ª—è–Ω–∏ –≤ –ù–µ–æ–ø–µ–¥–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ! üìö';
    } else {
      return '–ü–æ—Ö–æ–∂–µ, Neoflex –¥–ª—è —Ç–µ–±—è –ø–æ–∫–∞ –∑–∞–≥–∞–¥–∫–∞. –ò–∑—É—á–∞–π –ù–µ–æ–ø–µ–¥–∏—é! üß†';
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ Neoflex'),
        backgroundColor: Colors.purple.shade800,
        foregroundColor: Colors.white,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.purple.shade300, Colors.purple.shade700],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: showResult
            ? Center(
          child: Padding(
            padding: EdgeInsets.all(16),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  '–†–µ–∑—É–ª—å—Ç–∞—Ç: $correctAnswers –∏–∑ ${selectedQuestions.length}',
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                SizedBox(height: 16),
                Text(
                  _getResultMessage(),
                  style: TextStyle(
                    fontSize: 18,
                    color: Colors.white,
                  ),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 32),
                ElevatedButton(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.purple.shade800,
                    foregroundColor: Colors.white,
                    padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                  ),
                  child: Text('–í–µ—Ä–Ω—É—Ç—å—Å—è'),
                ),
              ],
            ),
          ),
        )
            : FadeTransition(
          opacity: _animation,
          child: Padding(
            padding: EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '–í–æ–ø—Ä–æ—Å ${currentQuestionIndex + 1} –∏–∑ ${selectedQuestions.length}',
                  style: TextStyle(
                    fontSize: 18,
                    color: Colors.white70,
                  ),
                ),
                SizedBox(height: 16),
                Text(
                  selectedQuestions[currentQuestionIndex]['question'] as String,
                  style: TextStyle(
                    fontSize: 18,
                    color: Colors.white,
                  ),
                ),
                SizedBox(height: 16),
                ...(selectedQuestions[currentQuestionIndex]['options'] as String)
                    .split(',')
                    .map((option) => Padding(
                  padding: EdgeInsets.symmetric(vertical: 4),
                  child: ElevatedButton(
                    onPressed: () => _answerQuestion(option),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.white,
                      foregroundColor: Colors.purple.shade700,
                      minimumSize: Size(double.infinity, 50),
                    ),
                    child: Text(option),
                  ),
                ))
                    .toList(),
              ],
            ),
          ),
        ),
      ),
    );
  }
}